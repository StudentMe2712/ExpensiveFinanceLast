import { PrismaClient, UserRole } from '@prisma/client'
import bcrypt from 'bcryptjs'

const prisma = new PrismaClient()

async function createAdmin() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    const existingAdmin = await prisma.user.findFirst({
      where: { role: UserRole.ADMIN }
    })

    if (existingAdmin) {
      console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email)
      return
    }

    // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
    const hashedPassword = await bcrypt.hash('admin123', 12)
    
    const admin = await prisma.user.create({
      data: {
        email: 'admin@expensive-finance.com',
        password: hashedPassword,
        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
        phone: '+7 (777) 123-45-67',
        role: UserRole.ADMIN,
        isActive: true
      }
    })

    console.log('‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω:')
    console.log('üìß Email:', admin.email)
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123')
    console.log('üë§ –ò–º—è:', admin.name)
    console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', admin.phone)
    console.log('üõ°Ô∏è –†–æ–ª—å:', admin.role)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdmin()

