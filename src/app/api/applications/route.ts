import { NextRequest, NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import { getUserFromToken } from '@/lib/auth'

const prisma = new PrismaClient()

// Telegram Bot API (Developer Bot - –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8275935313:AAEJ6O8HN_6r6X-XRzzRpuWwb8jC883yn8o'
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || '-1002971250513' // Group Chat ID

// Client Bot Token (–¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞)
const TELEGRAM_CLIENT_BOT_TOKEN = process.env.TELEGRAM_CLIENT_BOT_TOKEN

async function sendTelegramMessage(message: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
      }),
    })

    if (!response.ok) {
      console.error('Failed to send Telegram message:', await response.text())
    }
  } catch (error) {
    console.error('Error sending Telegram message:', error)
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { fullName, phone, email, loanAmount, comment } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!fullName || !phone) {
      return NextResponse.json(
        { error: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    const token = request.cookies.get('auth-token')?.value
    let userId = null
    
    if (token) {
      const user = await getUserFromToken(token)
      userId = user?.id || null
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const application = await prisma.application.create({
      data: {
        name: fullName,
        phone,
        email: email || null,
        loanAmount: loanAmount || null,
        loanTerm: null,
        purpose: comment || null,
        hasInsurance: false,
        status: 'NEW',
        userId: userId,
        createdAt: new Date(),
      },
    })

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
    const telegramMessage = `
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${fullName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
${email ? `üìß <b>Email:</b> ${email}` : ''}

üí∞ <b>–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞:</b> ${loanAmount ? `${new Intl.NumberFormat('ru-RU').format(loanAmount)} ‚Ç∏` : '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
${comment ? `üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${comment}` : ''}

üìä <b>ID –∑–∞—è–≤–∫–∏:</b> #${application.id}
üïê <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Asia/Almaty' })}

<i>–ó–∞—è–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>
    `.trim()

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    await sendTelegramMessage(telegramMessage)

    return NextResponse.json(
      { 
        success: true, 
        message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
        applicationId: application.id 
      },
      { status: 201 }
    )

  } catch (error) {
    console.error('Error processing application:', error)
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const token = request.cookies.get('auth-token')?.value
    const user = token ? await getUserFromToken(token) : null

    if (!user) {
      return NextResponse.json(
        { error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' },
        { status: 401 }
      )
    }

    // –ï—Å–ª–∏ –∞–¥–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏, –∏–Ω–∞—á–µ —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const where = user.role === 'ADMIN' 
      ? {}
      : {
          OR: [
            { userId: user.id },
            { email: user.email }
          ]
        }

    const applications = await prisma.application.findMany({
      where,
      orderBy: { createdAt: 'desc' },
      include: {
        user: {
          select: {
            id: true,
            name: true,
            email: true
          }
        }
      }
    })

    return NextResponse.json({ 
      success: true,
      applications: applications.map(app => ({
        id: app.id,
        name: app.name,
        phone: app.phone,
        email: app.email,
        loanAmount: app.loanAmount,
        loanTerm: app.loanTerm,
        status: app.status,
        createdAt: app.createdAt.toISOString(),
        comment: app.comment,
        user: app.user
      }))
    })
  } catch (error) {
    console.error('Error fetching applications:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫' },
      { status: 500 }
    )
  }
}